diff --git a/HW3/src/Fibonacci_modified.c b/HW3/src/Fibonacci_modified.c
index b742ff5..27a2c68 100644
--- a/HW3/src/Fibonacci_modified.c
+++ b/HW3/src/Fibonacci_modified.c
@@ -4,15 +4,21 @@

 struct thread_data {
     int n;
-    int *dp;
+    int* dp;
 };
+int currMax = -1;

-void *fibonacci(void *arg) {
-    struct thread_data *data = (struct thread_data *)arg;
+#define max(a, b) a > b ? a : b
+
+void* fibonacci(void* arg) {
+    struct thread_data* data = (struct thread_data*) arg;
+    if (data->dp[data->n] != 0) {
+        pthread_exit(NULL);
+        return NULL;
+    }
     if (data->n < 2) {
         data->dp[data->n] = data->n;
-        pthread_exit(NULL);
-    } else if (data->dp[data->n] == 0) {
+    } else {
         pthread_t thread1;
         pthread_t thread2;
         struct thread_data data1 = {data->n - 1, data->dp};
@@ -23,15 +29,16 @@ void *fibonacci(void *arg) {
         pthread_join(thread2, NULL);
         data->dp[data->n] = data->dp[data->n - 1] + data->dp[data->n - 2];
     }
+    currMax = max(data->n, currMax);
     pthread_exit(NULL);
     return NULL;
 }

-int main(int argc, char *argv[]) {
+int main(int argc, char* argv[]) {
     int n;
     if (argc != 2) {
         printf(
-            "You didn't pass the target as argument, Please enter one now:\n");
+                "You didn't pass the target as argument, Please enter one now:\n");
         char input[10];
         fgets(input, 10, stdin);
         n = strtol(input, NULL, 10);
@@ -43,16 +50,17 @@ int main(int argc, char *argv[]) {
         return 1;
     }
     pthread_t thread;
-    int *dp = calloc(n + 1, sizeof(int));
+    int* dp = calloc(n + 1, sizeof(int));
     struct thread_data data = {n, dp};
     pthread_create(&thread, NULL, fibonacci, &data);
-    pthread_join(thread, NULL);
+
     printf("The sequence is:\n");
-    printf("%d", dp[0]);
-    for (int i = 1; i <= n; i++) {
-        printf(", %d", dp[i]);
+    for (int i = 0; i <= n; ++i) {
+        while (i > currMax); // spin lock awaiting children to finish
+        printf("%d ", dp[i]);
     }
-    printf("\n");
+    pthread_join(thread,
+                 NULL); // Though this is not necessary as the program's spun till the last child to finish, I kept it for the insurance.
     free(dp);
     return 0;
 }
